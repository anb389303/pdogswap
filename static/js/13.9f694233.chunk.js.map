{"version":3,"sources":["../node_modules/@material-ui/icons/esm/ArrowForwardIos.js","pages/AnalyticsPage/AnalyticsInfo.tsx","pages/AnalyticsPage/AnalyticsLiquidityChart.tsx","pages/AnalyticsPage/AnalyticsVolumeChart.tsx","pages/AnalyticsPage/AnalyticsOverview.tsx"],"names":["createSvgIcon","React","d","AnalyticsInfo","data","Box","mr","Typography","variant","pairCount","toLocaleString","oneDayTxns","oneDayVolumeUSD","GlobalConst","utils","FEEPERCENT","AnalyticsLiquidityChart","palette","useTheme","globalData","useGlobalData","useState","analyticChart","ONE_MONTH_CHART","durationIndex","setDurationIndex","globalChartData","updateGlobalChartData","useEffect","fetchChartData","a","getChartData","ALL_CHART","getChartStartTime","newChartData","chartData","getLimitedData","CHART_COUNT","liquidityPercentColor","getPriceColor","Number","liquidityChangeUSD","yAxisValues","useMemo","dailyVolumes","map","value","totalLiquidityUSD","minVolume","Math","floor","min","maxVolume","ceil","max","values","step","i","push","display","justifyContent","style","color","text","disabled","fontWeight","typeTexts","GlobalData","analytics","CHART_DURATION_TEXTS","chartTypes","CHART_DURATIONS","chartType","setChartType","mt","alignItems","primary","formatCompact","ml","height","px","borderRadius","bgcolor","bgColor","textColor","my","Skeleton","width","dayjs","format","dates","date","add","unix","categories","getChartDates","AnalyticsVolumeChart","volumeTypes","volumeIndex","setVolumeIndex","selectedVolumeIndex","setSelectedVolumeIndex","newWeeklyData","dayItems","weekItems","day","week","liquidityWeeks","forEach","ind","month","formatDateFromTimeStamp","THREE_MONTH_CHART","dateStr","getVolumePercent","volumeData","length","currentVolumeIndex","currentVolumeData","prevVolumeData","currentVolume","prevVolume","weeklyVolumeUSD","dailyVolumeUSD","weeklyVolumeChange","volumeChangeUSD","volumeDates","weekStart","weekEnd","barChartData","volumePercentColor","flex","oneWeekVolume","onHover","onMouseLeave","extend","utc","useStyles","makeStyles","panel","background","grey","A700","headingWrapper","marginLeft","AnalyticsOverview","classes","history","useHistory","breakpoints","isMobile","useMediaQuery","down","updateGlobalData","topTokens","updateTopTokens","topPairs","updateTopPairs","fetchGlobalData","getEthPrice","newPrice","oneDayPrice","getGlobalData","fetchTopTokens","getTopTokens","ROWSPERPAGE","topTokensData","fetchTopPairs","getTopPairs","pairs","formattedPairs","pair","id","getBulkPairData","pairData","mb","Grid","container","spacing","item","xs","sm","md","className","padding","flexDirection","flexWrap","paddingX","paddingY","cursor","onClick","ArrowForwardIos"],"mappings":"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","file":"static/js/13.9f694233.chunk.js","sourcesContent":["import * as React from 'react';\nimport createSvgIcon from './utils/createSvgIcon';\nexport default createSvgIcon( /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M5.88 4.12L13.76 12l-7.88 7.88L8 22l10-10L8 2z\"\n}), 'ArrowForwardIos');","import React from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { GlobalConst } from 'constants/index';\n\ninterface AnalyticsInfoProps {\n  data: any;\n}\n\nconst AnalyticsInfo: React.FC<AnalyticsInfoProps> = ({ data }) => {\n  return (\n    <>\n      <Box mr={5}>\n        <Typography variant='body2'>\n          Pairs: {data.pairCount.toLocaleString()}\n        </Typography>\n      </Box>\n      <Box mr={5}>\n        <Typography variant='body2'>\n          24h Transactions: {data.oneDayTxns.toLocaleString()}\n        </Typography>\n      </Box>\n      <Box>\n        <Typography variant='body2'>\n          24h Fees: $\n          {(\n            data.oneDayVolumeUSD * GlobalConst.utils.FEEPERCENT\n          ).toLocaleString()}\n        </Typography>\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsInfo;\n","import React, { useEffect, useState, useMemo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport dayjs from 'dayjs';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  formatCompact,\n  getChartData,\n  getPriceColor,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n} from 'utils';\nimport { GlobalConst, GlobalData } from 'constants/index';\nimport { AreaChart, ChartType } from 'components';\n\nconst AnalyticsLiquidityChart: React.FC = () => {\n  const { palette } = useTheme();\n  const { globalData } = useGlobalData();\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n  const [globalChartData, updateGlobalChartData] = useState<any[] | null>(null);\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData] = await getChartData(\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (newChartData) {\n        const chartData = getLimitedData(\n          newChartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateGlobalChartData(chartData);\n      }\n    };\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n\n  const liquidityPercentColor = getPriceColor(\n    globalData ? Number(globalData.liquidityChangeUSD) : 0,\n    palette,\n  );\n\n  const yAxisValues = useMemo(() => {\n    if (globalChartData) {\n      const dailyVolumes: number[] = globalChartData.map((value: any) =>\n        Number(value.totalLiquidityUSD),\n      );\n      // this is for defining the scale for the liquidity values to present in graph. Liquidity values are more than 100M so set the min and max amount with rounding after dividing into 20000000 to show all liquidity values into the graph\n      const minVolume =\n        Math.floor(Math.min(...dailyVolumes) / 20000000) * 20000000;\n      const maxVolume =\n        Math.ceil(Math.max(...dailyVolumes) / 20000000) * 20000000;\n      const values = [];\n      // show 10 values in the y axis of the graph\n      const step = (maxVolume - minVolume) / 10;\n      for (let i = maxVolume; i >= minVolume; i -= step) {\n        values.push(i);\n      }\n      return values;\n    } else {\n      return undefined;\n    }\n  }, [globalChartData]);\n\n  return (\n    <>\n      <Box display='flex' justifyContent='space-between'>\n        <Typography\n          variant='caption'\n          style={{ color: palette.text.disabled, fontWeight: 'bold' }}\n        >\n          LIQUIDITY\n        </Typography>\n        <ChartType\n          typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n          chartTypes={GlobalData.analytics.CHART_DURATIONS}\n          chartType={durationIndex}\n          setChartType={setDurationIndex}\n        />\n      </Box>\n      {globalData ? (\n        <Box mt={0.5} display='flex' alignItems='center'>\n          <Typography variant='h5' style={{ color: palette.text.primary }}>\n            ${formatCompact(globalData.totalLiquidityUSD)}\n          </Typography>\n          <Box\n            ml={1}\n            height={23}\n            px={1}\n            borderRadius={40}\n            bgcolor={liquidityPercentColor.bgColor}\n            color={liquidityPercentColor.textColor}\n          >\n            <Typography variant='caption'>\n              {`${globalData.liquidityChangeUSD > 0 ? '+' : ''}\n                      ${globalData.liquidityChangeUSD.toLocaleString()}`}\n              %\n            </Typography>\n          </Box>\n        </Box>\n      ) : (\n        <Box my={0.5}>\n          <Skeleton variant='rect' width='100%' height={24} />\n        </Box>\n      )}\n      <Box>\n        <Typography style={{ color: palette.text.disabled }} variant='caption'>\n          {dayjs().format('MMM DD, YYYY')}\n        </Typography>\n      </Box>\n      <Box mt={2}>\n        {globalChartData ? (\n          <AreaChart\n            data={globalChartData.map((value: any) =>\n              Number(value.totalLiquidityUSD),\n            )}\n            yAxisValues={yAxisValues}\n            dates={globalChartData.map((value: any) =>\n              dayjs(value.date * 1000)\n                .add(1, 'day')\n                .unix(),\n            )}\n            width='100%'\n            height={250}\n            categories={getChartDates(globalChartData, durationIndex)}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={223} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsLiquidityChart;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  formatCompact,\n  getChartData,\n  formatDateFromTimeStamp,\n  getPriceColor,\n  getChartDates,\n  getChartStartTime,\n  getLimitedData,\n} from 'utils';\nimport { BarChart, ChartType } from 'components';\nimport { GlobalConst, GlobalData } from 'constants/index';\n\nconst DAY_VOLUME = 0;\nconst WEEK_VOLUME = 1;\n\nconst AnalyticsVolumeChart: React.FC = () => {\n  const { palette } = useTheme();\n  const volumeTypes = [DAY_VOLUME, WEEK_VOLUME];\n  const volumeTypeTexts = ['D', 'W'];\n  const [volumeIndex, setVolumeIndex] = useState(DAY_VOLUME);\n  const [durationIndex, setDurationIndex] = useState(\n    GlobalConst.analyticChart.ONE_MONTH_CHART,\n  );\n  const [selectedVolumeIndex, setSelectedVolumeIndex] = useState(-1);\n  const { globalData } = useGlobalData();\n  const [globalChartData, updateGlobalChartData] = useState<any>(null);\n\n  useEffect(() => {\n    const fetchChartData = async () => {\n      updateGlobalChartData(null);\n      const [newChartData, newWeeklyData] = await getChartData(\n        durationIndex === GlobalConst.analyticChart.ALL_CHART\n          ? 0\n          : getChartStartTime(durationIndex),\n      );\n      if (newChartData && newWeeklyData) {\n        const dayItems = getLimitedData(\n          newChartData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        const weekItems = getLimitedData(\n          newWeeklyData,\n          GlobalConst.analyticChart.CHART_COUNT,\n        );\n        updateGlobalChartData({ day: dayItems, week: weekItems });\n      }\n    };\n    fetchChartData();\n  }, [updateGlobalChartData, durationIndex]);\n\n  const liquidityWeeks = useMemo(() => {\n    if (globalChartData) {\n      const dates: string[] = [];\n      globalChartData.week.forEach((value: any, ind: number) => {\n        const month = formatDateFromTimeStamp(Number(value.date), 'MMM');\n        const monthLastDate =\n          ind > 0\n            ? formatDateFromTimeStamp(\n                Number(globalChartData.week[ind - 1].date),\n                'MMM',\n              )\n            : '';\n        if (monthLastDate !== month) {\n          dates.push(month);\n        }\n        if (\n          durationIndex === GlobalConst.analyticChart.ONE_MONTH_CHART ||\n          durationIndex === GlobalConst.analyticChart.THREE_MONTH_CHART\n        ) {\n          const dateStr = formatDateFromTimeStamp(Number(value.date), 'D');\n          if (Number(dateStr) % 2 === 0) {\n            //Select dates(one date per 2 weeks) for x axis values of volume chart on week mode\n            dates.push(dateStr);\n          }\n        }\n      });\n      return dates;\n    } else {\n      return [];\n    }\n  }, [globalChartData, durationIndex]);\n\n  const getVolumePercent = (volumeIndex: number) => {\n    if (globalChartData && selectedVolumeIndex > 0) {\n      const volumeDataArr = [globalChartData.day, globalChartData.week];\n      const volumeData = volumeDataArr[volumeIndex];\n      if (!volumeData || volumeData.length <= 1) return 0;\n      const currentVolumeIndex = Math.min(\n        selectedVolumeIndex,\n        volumeData.length - 1,\n      );\n      const currentVolumeData = volumeData[currentVolumeIndex];\n      const prevVolumeData = volumeData[currentVolumeIndex - 1];\n      let currentVolume = 0;\n      let prevVolume = 0;\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          currentVolume = currentVolumeData.weeklyVolumeUSD;\n          prevVolume = prevVolumeData.weeklyVolumeUSD;\n          break;\n        case DAY_VOLUME:\n          currentVolume = currentVolumeData.dailyVolumeUSD;\n          prevVolume = prevVolumeData.dailyVolumeUSD;\n          break;\n      }\n      if (prevVolume <= 0) return 0;\n      return (currentVolume / prevVolume) * 100 - 100;\n    } else if (globalData && selectedVolumeIndex === -1) {\n      switch (volumeIndex) {\n        case WEEK_VOLUME:\n          return globalData.weeklyVolumeChange;\n        case DAY_VOLUME:\n          return globalData.volumeChangeUSD;\n        default:\n          return 0;\n      }\n    } else {\n      return 0;\n    }\n  };\n\n  const volumeDates = useMemo(() => {\n    if (selectedVolumeIndex > -1) {\n      if (volumeIndex === DAY_VOLUME) {\n        return formatDateFromTimeStamp(\n          Number(globalChartData.day[selectedVolumeIndex].date),\n          'MMM DD, YYYY',\n        );\n      } else {\n        const weekStart = formatDateFromTimeStamp(\n          Number(\n            globalChartData.week[Math.max(0, selectedVolumeIndex - 1)].date,\n          ),\n          'MMM DD, YYYY',\n          selectedVolumeIndex > 0 ? 2 : -5,\n        );\n        const weekEnd = formatDateFromTimeStamp(\n          Number(globalChartData.week[selectedVolumeIndex].date),\n          'MMM DD, YYYY',\n        );\n        return `${weekStart} - ${weekEnd}`;\n      }\n    }\n    return '';\n  }, [globalChartData, selectedVolumeIndex, volumeIndex]);\n\n  const barChartData = useMemo(() => {\n    if (globalChartData) {\n      return volumeIndex === WEEK_VOLUME\n        ? globalChartData.week.map((value: any) => value.weeklyVolumeUSD)\n        : globalChartData.day.map((value: any) => value.dailyVolumeUSD);\n    } else {\n      return [];\n    }\n  }, [globalChartData, volumeIndex]);\n\n  const volumePercentColor = getPriceColor(\n    Number(getVolumePercent(volumeIndex)),\n    palette,\n  );\n\n  return (\n    <>\n      <Box>\n        <Box display='flex' justifyContent='space-between'>\n          <Typography\n            variant='caption'\n            style={{ color: palette.text.disabled, fontWeight: 'bold' }}\n          >\n            VOLUME {selectedVolumeIndex === -1 ? '(24hr)' : ''}\n          </Typography>\n          <ChartType\n            chartTypes={volumeTypes}\n            typeTexts={volumeTypeTexts}\n            chartType={volumeIndex}\n            setChartType={setVolumeIndex}\n          />\n        </Box>\n        <Box\n          mt={0.5}\n          display='flex'\n          alignItems='flex-start'\n          justifyContent='space-between'\n        >\n          {globalChartData && globalData ? (\n            <Box flex={1} mr={2}>\n              <Box display='flex' alignItems='center'>\n                <Typography\n                  variant='h5'\n                  style={{ color: palette.text.primary }}\n                >\n                  $\n                  {formatCompact(\n                    selectedVolumeIndex > -1\n                      ? volumeIndex === DAY_VOLUME\n                        ? globalChartData.day[selectedVolumeIndex]\n                            .dailyVolumeUSD\n                        : globalChartData.week[selectedVolumeIndex]\n                            .weeklyVolumeUSD\n                      : volumeIndex === DAY_VOLUME\n                      ? globalData.oneDayVolumeUSD\n                      : globalData.oneWeekVolume,\n                  )}\n                </Typography>\n                <Box\n                  ml={1}\n                  height={23}\n                  px={1}\n                  borderRadius={40}\n                  bgcolor={volumePercentColor.bgColor}\n                  color={volumePercentColor.textColor}\n                >\n                  <Typography variant='caption'>\n                    {`${getVolumePercent(volumeIndex) > 0 ? '+' : ''}\n                      ${getVolumePercent(volumeIndex).toLocaleString()}`}\n                    %\n                  </Typography>\n                </Box>\n              </Box>\n              <Box height={21}>\n                <Typography\n                  style={{ color: palette.text.disabled }}\n                  variant='caption'\n                >\n                  {volumeDates}\n                </Typography>\n              </Box>\n            </Box>\n          ) : (\n            <Box mr={2} flex={1}>\n              <Skeleton variant='rect' width='100%' height={24} />\n            </Box>\n          )}\n          <ChartType\n            chartTypes={GlobalData.analytics.CHART_DURATIONS}\n            typeTexts={GlobalData.analytics.CHART_DURATION_TEXTS}\n            chartType={durationIndex}\n            setChartType={setDurationIndex}\n          />\n        </Box>\n      </Box>\n      <Box mt={2}>\n        {globalChartData ? (\n          <BarChart\n            height={200}\n            data={barChartData}\n            categories={\n              volumeIndex === WEEK_VOLUME\n                ? liquidityWeeks\n                : getChartDates(globalChartData.day, durationIndex)\n            }\n            onHover={(ind) => setSelectedVolumeIndex(ind)}\n            onMouseLeave={() => {\n              setSelectedVolumeIndex(-1);\n            }}\n          />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={250} />\n        )}\n      </Box>\n    </>\n  );\n};\n\nexport default AnalyticsVolumeChart;\n","import React, { useState, useEffect } from 'react';\nimport { Box, Typography, Grid, useMediaQuery } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { ArrowForwardIos } from '@material-ui/icons';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { useGlobalData } from 'state/application/hooks';\nimport {\n  getEthPrice,\n  getTopPairs,\n  getTopTokens,\n  getGlobalData,\n  getBulkPairData,\n} from 'utils';\nimport { GlobalConst } from 'constants/index';\nimport { TokensTable, PairTable } from 'components';\nimport AnalyticsInfo from './AnalyticsInfo';\nimport AnalyticsLiquidityChart from './AnalyticsLiquidityChart';\nimport AnalyticsVolumeChart from './AnalyticsVolumeChart';\n\ndayjs.extend(utc);\n\nconst useStyles = makeStyles(({ palette }) => ({\n  panel: {\n    background: palette.grey.A700,\n    borderRadius: 20,\n  },\n  headingWrapper: {\n    display: 'flex',\n    alignItems: 'center',\n    '& h6': {\n      color: palette.text.disabled,\n    },\n    '& svg': {\n      height: 16,\n      marginLeft: 2,\n      color: '#3d71ff',\n    },\n  },\n}));\n\nconst AnalyticsOverview: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { breakpoints } = useTheme();\n  const isMobile = useMediaQuery(breakpoints.down('xs'));\n  const { globalData, updateGlobalData } = useGlobalData();\n  const [topTokens, updateTopTokens] = useState<any[] | null>(null);\n  const [topPairs, updateTopPairs] = useState<any[] | null>(null);\n\n  useEffect(() => {\n    const fetchGlobalData = async () => {\n      const [newPrice, oneDayPrice] = await getEthPrice();\n      const globalData = await getGlobalData(newPrice, oneDayPrice);\n      if (globalData) {\n        updateGlobalData({ data: globalData });\n      }\n    };\n    const fetchTopTokens = async () => {\n      updateTopTokens(null);\n      const [newPrice, oneDayPrice] = await getEthPrice();\n      const topTokensData = await getTopTokens(\n        newPrice,\n        oneDayPrice,\n        GlobalConst.utils.ROWSPERPAGE,\n      );\n      if (topTokensData) {\n        updateTopTokens(topTokensData);\n      }\n    };\n    const fetchTopPairs = async () => {\n      updateTopPairs(null);\n      const [newPrice] = await getEthPrice();\n      const pairs = await getTopPairs(GlobalConst.utils.ROWSPERPAGE);\n      const formattedPairs = pairs\n        ? pairs.map((pair: any) => {\n            return pair.id;\n          })\n        : [];\n      const pairData = await getBulkPairData(formattedPairs, newPrice);\n      if (pairData) {\n        updateTopPairs(pairData);\n      }\n    };\n    fetchGlobalData();\n    fetchTopTokens();\n    fetchTopPairs();\n  }, [updateGlobalData, updateTopTokens, updateTopPairs]);\n\n  return (\n    <Box width='100%' mb={3}>\n      <Grid container spacing={4}>\n        <Grid item xs={12} sm={12} md={6}>\n          <Box className={classes.panel} padding={isMobile ? 1.5 : 3} width={1}>\n            <AnalyticsLiquidityChart />\n          </Box>\n        </Grid>\n        <Grid item xs={12} sm={12} md={6}>\n          <Box\n            className={classes.panel}\n            padding={isMobile ? 1.5 : 3}\n            width={1}\n            height={1}\n            display='flex'\n            flexDirection='column'\n            justifyContent='space-between'\n          >\n            <AnalyticsVolumeChart />\n          </Box>\n        </Grid>\n      </Grid>\n      <Box mt={4}>\n        <Box\n          display='flex'\n          flexWrap='wrap'\n          paddingX={4}\n          paddingY={1.5}\n          className={classes.panel}\n        >\n          {globalData ? (\n            <AnalyticsInfo data={globalData} />\n          ) : (\n            <Skeleton width='100%' height={20} />\n          )}\n        </Box>\n      </Box>\n      <Box mt={4}>\n        <Box display='flex' justifyContent='space-between' alignItems='center'>\n          <Box className={classes.headingWrapper}>\n            <Typography variant='h6'>Top Tokens</Typography>\n          </Box>\n          <Box\n            className={classes.headingWrapper}\n            style={{ cursor: 'pointer' }}\n            onClick={() => history.push(`/analytics/tokens`)}\n          >\n            <Typography variant='h6'>See All</Typography>\n            <ArrowForwardIos />\n          </Box>\n        </Box>\n      </Box>\n      <Box\n        mt={3}\n        paddingX={isMobile ? 1.5 : 4}\n        paddingY={isMobile ? 1.5 : 3}\n        className={classes.panel}\n      >\n        {topTokens ? (\n          <TokensTable data={topTokens} />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={150} />\n        )}\n      </Box>\n      <Box mt={4}>\n        <Box display='flex' justifyContent='space-between' alignItems='center'>\n          <Box className={classes.headingWrapper}>\n            <Typography variant='h6'>Top Pairs</Typography>\n          </Box>\n          <Box\n            className={classes.headingWrapper}\n            style={{ cursor: 'pointer' }}\n            onClick={() => history.push(`/analytics/pairs`)}\n          >\n            <Typography variant='h6'>See All</Typography>\n            <ArrowForwardIos />\n          </Box>\n        </Box>\n      </Box>\n      <Box\n        mt={3}\n        paddingX={isMobile ? 1.5 : 4}\n        paddingY={isMobile ? 1.5 : 3}\n        className={classes.panel}\n      >\n        {topPairs ? (\n          <PairTable data={topPairs} />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={150} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default AnalyticsOverview;\n"],"sourceRoot":""}