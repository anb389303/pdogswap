{"version":3,"sources":["pages/AnalyticsPage/AnalyticsTokens.tsx"],"names":["useStyles","makeStyles","palette","breakpoints","tokensFilter","cursor","display","margin","panel","background","grey","A700","borderRadius","padding","down","AnalyticsTokens","classes","useTheme","useState","setTokensFilter","topTokens","updateTopTokens","bookmarkTokens","useBookmarkTokens","favoriteTokens","useMemo","filter","token","indexOf","id","useEffect","fetchTopTokens","a","getEthPrice","newPrice","oneDayPrice","getTopTokens","topTokensData","width","mb","hideArrow","my","px","flexWrap","alignItems","className","onClick","color","primary","main","text","disabled","variant","length","data","height"],"mappings":"gQAQMA,EAAYC,aAAW,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,MAA+B,CAC1DC,aAAc,CACZC,OAAQ,UACRC,QAAS,OACTC,OAAQ,kBAEVC,MAAM,aACJC,WAAYP,EAAQQ,KAAKC,KACzBC,aAAc,GACdC,QAAS,IACRV,EAAYW,KAAK,MAAQ,CACxBD,QAAS,SA+EAE,UA1EmB,WAChC,IAAMC,EAAUhB,IACRE,EAAYe,cAAZf,QACR,EAAwCgB,mBAAS,GAAjD,mBAAOd,EAAP,KAAqBe,EAArB,KAEA,EAAqCD,mBAAuB,MAA5D,mBAAOE,EAAP,KAAkBC,EAAlB,KACQC,EAAmBC,cAAnBD,eAEFE,EAAiBC,mBAAQ,WAC7B,OAAIL,EACKA,EAAUM,QACf,SAACC,GAAD,OAAgBL,EAAeM,QAAQD,EAAME,KAAO,KAG/C,KAER,CAACT,EAAWE,IAef,OAbAQ,qBAAU,WACR,IAAMC,EAAc,uCAAG,oCAAAC,EAAA,6DACrBX,EAAgB,MADK,SAEiBY,cAFjB,0CAEdC,EAFc,KAEJC,EAFI,cAGOC,aAAaF,EAAUC,EAAa,KAH3C,QAGfE,EAHe,SAKnBhB,EAAgBgB,GALG,4CAAH,qDAQpBN,MAEC,CAACV,IAGF,eAAC,IAAD,CAAKiB,MAAM,OAAOC,GAAI,EAAtB,UACE,cAAC,IAAD,CAAW9B,WAAYP,EAAQQ,KAAKC,KAAM6B,WAAW,IACrD,eAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGpC,QAAQ,OAAOqC,SAAS,OAAOC,WAAW,SAA7D,UACE,cAAC,IAAD,CACEC,UAAW7B,EAAQZ,aACnB0C,QAAS,kBAAM3B,EAAgB,IAC/B4B,MACmB,IAAjB3C,EAAqBF,EAAQ8C,QAAQC,KAAO/C,EAAQgD,KAAKC,SAJ7D,SAOE,cAAC,IAAD,CAAYC,QAAQ,KAApB,2BAEF,cAAC,IAAD,CACEP,UAAW7B,EAAQZ,aACnB2C,MACmB,IAAjB3C,EAAqBF,EAAQ8C,QAAQC,KAAO/C,EAAQgD,KAAKC,SAE3DL,QAAS,kBAAM3B,EAAgB,IALjC,SAOE,cAAC,IAAD,CAAYiC,QAAQ,KAApB,0BAEF,cAAC,IAAD,CACEP,UAAW7B,EAAQZ,aACnB2C,MACmB,IAAjB3C,EAAqBF,EAAQ8C,QAAQC,KAAO/C,EAAQgD,KAAKC,SAE3DL,QAAS,kBAAM3B,EAAgB,IALjC,SAOE,cAAC,IAAD,CAAYiC,QAAQ,KAApB,8BAGJ,cAAC,IAAD,CAAKP,UAAW7B,EAAQR,MAAxB,SACGY,GAAkC,MAArBA,EAAUiC,OACtB,cAAC,IAAD,CAAaC,KAAuB,IAAjBlD,EAAqBgB,EAAYI,IAEpD,cAAC,IAAD,CAAU4B,QAAQ,OAAOd,MAAM,OAAOiB,OAAQ","file":"static/js/15.2ce5fc85.chunk.js","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport { TopMovers, TokensTable } from 'components';\nimport { useBookmarkTokens } from 'state/application/hooks';\nimport { getEthPrice, getTopTokens } from 'utils';\nimport { Skeleton } from '@material-ui/lab';\n\nconst useStyles = makeStyles(({ palette, breakpoints }) => ({\n  tokensFilter: {\n    cursor: 'pointer',\n    display: 'flex',\n    margin: '8px 16px 8px 0',\n  },\n  panel: {\n    background: palette.grey.A700,\n    borderRadius: 20,\n    padding: 24,\n    [breakpoints.down('xs')]: {\n      padding: 12,\n    },\n  },\n}));\n\nconst AnalyticsTokens: React.FC = () => {\n  const classes = useStyles();\n  const { palette } = useTheme();\n  const [tokensFilter, setTokensFilter] = useState(0);\n\n  const [topTokens, updateTopTokens] = useState<any[] | null>(null);\n  const { bookmarkTokens } = useBookmarkTokens();\n\n  const favoriteTokens = useMemo(() => {\n    if (topTokens) {\n      return topTokens.filter(\n        (token: any) => bookmarkTokens.indexOf(token.id) > -1,\n      );\n    } else {\n      return [];\n    }\n  }, [topTokens, bookmarkTokens]);\n\n  useEffect(() => {\n    const fetchTopTokens = async () => {\n      updateTopTokens(null); //set top tokens as null to show loading status when fetching tokens data\n      const [newPrice, oneDayPrice] = await getEthPrice();\n      const topTokensData = await getTopTokens(newPrice, oneDayPrice, 200);\n      if (topTokensData) {\n        updateTopTokens(topTokensData);\n      }\n    };\n    fetchTopTokens();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [updateTopTokens]);\n\n  return (\n    <Box width='100%' mb={3}>\n      <TopMovers background={palette.grey.A700} hideArrow={true} />\n      <Box my={4} px={2} display='flex' flexWrap='wrap' alignItems='center'>\n        <Box\n          className={classes.tokensFilter}\n          onClick={() => setTokensFilter(0)}\n          color={\n            tokensFilter === 0 ? palette.primary.main : palette.text.disabled\n          }\n        >\n          <Typography variant='h6'>All Cryptos</Typography>\n        </Box>\n        <Box\n          className={classes.tokensFilter}\n          color={\n            tokensFilter === 1 ? palette.primary.main : palette.text.disabled\n          }\n          onClick={() => setTokensFilter(1)}\n        >\n          <Typography variant='h6'>Favourites</Typography>\n        </Box>\n        <Box\n          className={classes.tokensFilter}\n          color={\n            tokensFilter === 2 ? palette.primary.main : palette.text.disabled\n          }\n          onClick={() => setTokensFilter(2)}\n        >\n          <Typography variant='h6'>New Listing</Typography>\n        </Box>\n      </Box>\n      <Box className={classes.panel}>\n        {topTokens && topTokens.length === 200 ? (\n          <TokensTable data={tokensFilter === 0 ? topTokens : favoriteTokens} />\n        ) : (\n          <Skeleton variant='rect' width='100%' height={150} />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default AnalyticsTokens;\n"],"sourceRoot":""}